<div class="doc-part-box" id="ajax">
  <h2>ajax</h2>
  <p class="article-title">post</p>
  <p>内部使用fetch()方法实现.包装处理了参数,方便使用.</p>
  <pre class="bg-gray-lt">

    $.post(url, para, initCfg = null, resType = 'json')

</pre>
  <ul class="list square">
    <li>url : string 请求地址url</li>
    <li>para : FormData|json|string json对象或FormData对象或者字符串,如果是json对象,会转化成FormData对象.para会设置到initCfg.body属性.</li>
    <li>initCfg : json fetch请求配置对象.例如传headers:{'Auth':'xxx'}用来验证</li>
    <li>resType : string 返回值类型 默认"json",可选"html"</li>
    <li>return : Promise 返回值类型,fetch().then()返回的Promise对象</li>
  </ul>
  <p>post请求,.then()链式调用方式.方法发送fetch请求后,调用then()处理,如果res.ok==ok,默认返回json结果.</p>
  <p>当res.ok为false时,丢出异常,异常信息是res.text()的文本信息.</p>
  <p>后面需要继续调用.then()来处理结果,也可以调用.catch()处理异常</p>
  <p>外部调用后可以继续使用then(),catch().</p>
  <pre class="bg-gray-lt">
  let para = { p1:'',p2:'' };
  $.post('http://url', para)
    // 这个data值: resType != 'json' ? res.text() : res.json();
    .then((data) => {
      console.log(data);
    })
    .catch((err) => {
      console.log('服务器异常')
    })

</pre>
  <br />
  <p class="article-title">get</p>
  <pre class="bg-gray-lt">

    $.get(url, para, initCfg = null, resType = 'html')

</pre>
  <ul class="list square">
    <li>url : string 请求地址url</li>
    <li>para : FormData|json|string json对象或FormData对象或者字符串,会转化为url参数加到URL地址上</li>
    <li>initCfg : json fetch请求配置对象.例如传headers:{'Auth':'xxx'}用来验证</li>
    <li>resType : string 返回值类型 默认"json",可选"html"</li>
    <li>return : Promise 返回值类型,fetch().then()返回的Promise对象</li>
  </ul>
  <p>get请求,.then()链式调用方式.方法发送fetch请求后,调用then()处理,如果res.ok==ok,默认返回text结果.</p>
  <p>当res.ok为false时,丢出异常,异常信息是res.text()的文本信息.</p>
  <p>后面需要继续调用.then()来处理结果,也可以调用.catch()处理异常</p>
  <pre class="bg-gray-lt">

  let para = { p1:'a',p2:'b' },para1="id=5"
  // para会转化为 p1=a&p2=b,然后加到url上,如果已有参数,会加到最后. http://url?p1=a&p2=b&id=5
  $.get('http://url', para)
    // 这个html默认服务器返回的是html字符串
    .then((html) => {
      console.log(html);
    })
    .catch((err) => {
      console.log('服务器异常')
    })

</pre>
  <p class="article-title text-lg">await方式</p>
  <p>使用await的语法,可读性更好.是同步代码的习惯,远离繁琐的回调函数.</p>
  <p class="article-title">postAsync</p>
  <pre class="bg-gray-lt">

  $.postAsync(url, para, initCfg = null, resType = 'json')

</pre>
  <p>post请求,使用await方式.当res.ok==true时,默认返回json结果.</p>
  <p>当res.ok为false时,丢出异常,异常信息是res.text()的文本信息.要获取异常,可以在try catch中使用本方法</p>
  <pre class="bg-gray-lt">

    try {
      let para = { p1:'',p2:'' };
      let json = await $.postAsync('http://url',para);
      console.log(json);
    } catch (err) {
      console.log(err);
    }

</pre>
  <p class="article-title">getAsync</p>
  <pre class="bg-gray-lt">

  $.getAsync(url, para, initCfg = null, resType = 'html')

</pre>
  <p>get请求,使用await方式.当res.ok==true时,默认返回text结果.</p>
  <p>当res.ok为false时,丢出异常,异常信息是res.text()的文本信息.要获取异常,可以在try catch中使用本方法</p>
  <pre class="bg-gray-lt">

    try {
      let html = await $.postAsync('http://url');
      console.log(html);
    } catch (err) {
      console.log(err);
    }
    
</pre>
  <br />
  <p class="article-title">fetch请求配置</p>
  <p>initCfg参数用于配置fetch请求,就是fetch()的第2个参数. [fetch() 接受第二个可选参数,一个可以控制不同配置的 init 对象]</p>
  <p>para参数,将会设置到fetch()第2个参数里的 body 属性的值.para参数最后会转为FormData对象.</p>
  <p>如果要将参数放到body,para的参数必须是字符串.或者不设置para,直接设置body属性.</p>
  <pre class="bg-gray-lt">

    // fetch常用请求配置
    fetch(url,{
      method: 'POST',// GET, POST
      headers: {
                  'Auth':'',
                  'Content-Type': 'application/json'
                  // 'Content-Type': 'application/x-www-form-urlencoded',
               },
      body: new FormData()
    })

</pre>
</div>