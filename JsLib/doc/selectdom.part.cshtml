@*
  1.模板页名字规定: "页面名字.part.cshtml""
  2.内容容器固定如下:
<div class="doc-part-box" id="页面名字">
  <h2>标题</h2>
  ......
  ......
</div>
*@
<div class="doc-part-box" id="selectdom">
  <h2>dom选择</h2>
  <p>$(<b>selector</b>),支持字符串和dom对象</p>
  <pre class="bg-gray-lt">

    // 1.字符串css选择器,里面实现是 <b>document.querySelectorAll()</b> 方法,支持css选择器
    $('#id') , $('.class') , $('div') , $('.class .xx') , ...

    // 2.带尖括号的字符串,生成新dom元素
    $('&lt;div&gt;')

    // 3.dom对象,或者dom对象数组
    let div = document.createElement('div')
    $(div)
    let divarr = [];
    divarr.push(div1);divarr.push(div2);
    $(divarr)
  </pre>
</div>
<div class="doc-part-box" id="find">
  <h2>find(selector)</h2>
  <p>以已经匹配的元素为根,查找子元素.(内部使用 dom.querySelectorAll())</p>
  <pre class="bg-gray-lt">
    &lt;div id="id1"&gt;&lt;span class="ss"&gt;&lt;/span&gt;&lt;p&gt;aa&lt;/p&gt;&lt;/div&gt;
    // 匹配 span
    $('#id1').find('.ss')

</pre>
</div>
<div class="doc-part-box" id="eq">
  <h2>eq(index)</h2>
  <p>筛选取匹配元素的第n个元素</p>
  <pre class="bg-gray-lt">

    &lt;div&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/div&gt;
    // 匹配 span1
    $('span').eq(0)

</pre>
</div>
<div class="doc-part-box" id="index">
  <h2>index()</h2>
  <p>返回第一个匹配元素在父元素中的索引</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/div&gt;
    // 返回 1
    $('span').index()

</pre>
</div>
<div class="doc-part-box" id="siblings">
  <h2>siblings(selector)</h2>
  <p>查找所有匹配元素的同级元素,不包含匹配元素自己. selector: 可以筛选</p>
  <pre class="bg-gray-lt">

    &lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/div&gt;
    // 匹配 p
    $('span').siblings()

</pre>
</div>
<div class="doc-part-box" id="next">
  <h2>next(selector)</h2>
  <p>查找所有匹配元素的后面一个同辈元素,不指定筛选时返回紧邻的后一个元素</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;label&gt;&lt;/label&gt;&lt;/div&gt;
    // 匹配 span1
    $('p').next()
    // 匹配 label
    $('p').next('label')

</pre>
</div>
<div class="doc-part-box" id="nextAll">
  <h2>nextAll(selector)</h2>
  <p>查找所有匹配元素之后所有的同辈元素</p>
  <pre class="bg-gray-lt">

    &lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;label&gt;&lt;/label&gt;&lt;/div&gt;
    // 匹配 span1 span2 label
    $('p').nextAll()

</pre>
</div>
<div class="doc-part-box" id="prev">
  <h2>prev(selector)</h2>
  <p>查找所有匹配元素的紧邻的前面那一个同辈元素</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;label&gt;&lt;/label&gt;&lt;/div&gt;
    // 匹配 span2
    $('label').prev()

</pre>
</div>
<div class="doc-part-box" id="prevAll">
  <h2>prevAll(selector)</h2>
  <p>查找所有匹配元素之后所有的同辈元素</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;label&gt;&lt;/label&gt;&lt;/div&gt;
    // 匹配 span2 span1 p
    $('label').prevAll()

</pre>
</div>
<div class="doc-part-box" id="parent">
  <h2>parent(selector)</h2>
  <p>返回每个匹配元素的一个父元素或者祖先元素.不传参数时,返回父元素</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;label&gt;&lt;/label&gt;&lt;/div&gt;
    // 匹配 div
    $('label').parent()

</pre>
</div>
<div class="doc-part-box" id="prop">
  <h2>prop(key, val)</h2>
  <p>设置每个匹配元素的属性或返回第一个元素的属性值.</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;p p1="aa"&gt;&lt;/p&gt;&lt;span&gt;1&lt;/span&gt;&lt;/div&gt;
    // 返回 aa
    $('p').prop('p1')
    // p1修改为 bb
    $('p').prop('p1','bb')

</pre>
</div>
<div class="doc-part-box" id="val">
  <h2>val(val)</h2>
  <p>设置每个匹配元素的value属性或返回第一个元素的value属性值.主要用于input,textarea,select等表单元素</p>
  <pre class="bg-gray-lt">
  &lt;input type="text" value="mirror" /&gt;
  // 返回 mirror
  $('input').val()
  // 设置 value值
  $('input').val('space')

</pre>
</div>
<div class="doc-part-box" id="removeProp">
  <h2>removeProp(...key)</h2>
  <p>删除每个匹配的元素指定的属性.属性名一个或者多个.</p>
  <pre class="bg-gray-lt">
    &lt;span p1="aa" p2="bb" title="cc"&gt;&lt;/span&gt;
    // 删除属性 p1 p2
    $('span').removeProp("p1","p2");

</pre>
</div>
<div class="doc-part-box" id="addClass">
  <h2>addClass(...val)</h2>
  <p>为每个匹配的元素添加指定的类名</p>
  <pre class="bg-gray-lt">
    &lt;span p1="aa" p2="bb" title="cc"&gt;&lt;/span&gt;
    // 为span添加 primary btn 样式类
    $('span').addClass("primary","btn");

</pre>
</div>
<div class="doc-part-box" id="removeClass">
  <h2>removeClass(...val)</h2>
  <p>从所有匹配的元素中删除全部或者指定的类</p>
  <pre class="bg-gray-lt">
    &lt;span class="primary btn cc" p2="dd"&gt;&lt;/span&gt;
    // 删除样式primary btn
    $('span').removeClass("primary","btn");

</pre>
</div>
<div class="doc-part-box" id="hasClass">
  <h2>hasClass(val)</h2>
  <p>检查第一个匹配的元素是否含有指定的类</p>
  <pre class="bg-gray-lt">
    &lt;span class="primary btn cc" p2="dd"&gt;&lt;/span&gt;
    // 返回 true
    $('span').hasClass("primary");

</pre>
</div>
<div class="doc-part-box" id="text">
  <h2>text(val)</h2>
  <p>设置所有匹配的元素的innerText.无参数时,返回第一个元素的innerText内容</p>
  <pre class="bg-gray-lt">
    &lt;span class="primary btn cc" p2="dd"&gt;&lt;/span&gt;
    // 设置文本mirror space
    $('span').text("mirror space");

</pre>
</div>
<div class="doc-part-box" id="html">
  <h2>html(val)</h2>
  <p>设置所有匹配的元素的innerHTML属性.如果html中,含有script时,会重新生成script标签再加入文档中.</p>
  <p>如果有外联的script,会ajax下载变成内联的.如此操作,当html加入到文档时,其中包含的script脚本会执行.</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;/div&gt;
    let html='&lt;p&gt;&lt;/p&gt;'
    // 给div设置html文本标签
    $('div').html(html)

</pre>
</div>
<div class="doc-part-box" id="append">
  <h2>append(content)</h2>
  <p>向每个匹配元素内部追加内容.content是一个dom对象,或者DocumentFragment对象,或者html字符串</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;span&gt;1&lt;/span&gt;&lt;/div&gt;
    let p=document.createElement('p');
    // 给div里追加p元素,在span1后面
    $('&lt;div&gt;').append(p)

    // 多个内容可以多次调用append
    $('&lt;div&gt;').append(p).append(p1);

</pre>
</div>
<div class="doc-part-box" id="prepend">
  <h2>prepend(content)</h2>
  <p>向每个匹配元素内部第一子节点前面加入内容.</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;span&gt;1&lt;/span&gt;&lt;/div&gt;
    let p=document.createElement('p');
    // 给div里前面插入p元素,在span1前面
    $('div').prepend(p)

</pre>
</div>
<div class="doc-part-box" id="before">
  <h2>before(content)</h2>
  <p>向每个匹配元素的前面加元素</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;span&gt;1&lt;/span&gt;&lt;/div&gt;
    let p=document.createElement('p');
    // 在span前面插入p元素
    $('span').before(p)

</pre>
</div>
<div class="doc-part-box" id="after">
  <h2>after(content)</h2>
  <p>向每个匹配元素的后面加元素</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;span&gt;1&lt;/span&gt;&lt;/div&gt;
    let p=document.createElement('p');
    // 在span后面插入p元素
    $('span').after(p)

</pre>
</div>
<div class="doc-part-box" id="remove">
  <h2>remove()</h2>
  <p>删除所有匹配的元素.被删除的元素要有个父元素.</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;span&gt;1&lt;/span&gt;&lt;/div&gt;
    // 删除span
    $('span').remove()

</pre>
</div>
<div class="doc-part-box" id="empty">
  <h2>empty()</h2>
  <p>清空所有匹配的元素的全部子元素</p>
  <pre class="bg-gray-lt">
    &lt;div&gt;&lt;span&gt;1&lt;/span&gt;&lt;/div&gt;
    // 删除div的所有子元素
    $('div').empty()

</pre>
</div>
<div class="doc-part-box" id="fragment">
  <h2>fragment(...content)</h2>
  <p>建立一个DocumentFragment文档片段对象,将传入的node或DocumentFragment对象添加到其中.</p>
  <p>$ 的静态方法, 这个就是调用document.createDocumentFragment()方法.</p>
  <pre class="bg-gray-lt">
    // 参数是node节点 或者 DocumentFragment对象,返回 DocumentFragment实例
    $.fragment(...content)

</pre>
</div>

<div class="doc-part-box" id="loadhtml">
  <h2>$('#id').load(url)</h2>
  <p>从url加载html,然后设置到所有匹配元素的innerHTML.</p>
  <p>$ 的实例方法,类似于jquery.load()的功能.这里是使用XMLHttpRequest对象的get方法实现.不能跨域.</p>
  <p>如果返回失败了,丢出异常.如果成功:xhr.readyState === 4 && xhr.status === 200 则设置返回的html到容器元素里.</p>
  <p>这个主要用于,ajax请求html片段页面.不使用fetch的原因是,为了兼容打包APP.使用xhr时,可以从包本地取得html片段.</p>
  <pre class="bg-gray-lt">
    // 参数是url地址
    $('#div1').load('test.html');
    // 也支持js,扩展名js
    $('#div1').load('testjs.js');
</pre>
  <br />
  <p>也可以加载js,为了实现动态加载js.用url扩展名判断,例如 xx.js是js文件,hh.html是html文件.</p>
  <p>如果请求的是js,那么将js放到script标记中. 再放到this.html('&lt;script&gt;xhr.response)</p>
</div>
