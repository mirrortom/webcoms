@*
  1.模板页名字规定: "页面名字.part.cshtml""
  2.内容容器固定如下:
    <div class="doc-part-box" id="页面名字">
      <h2>标题</h2>
      ......
      ......
    </div>
*@
<div class="doc-part-box" id="range">
  <h2>范围滑块</h2>
  <p>自定义滑动组件,比较常用的组件.</p>
  <pre class="bg-gray-lt">

  &lt;m-range id="range1" width="600" min="0" max="100" val="0"&gt;&lt;/m-range&gt;
  // dom属性,都可选
  width: 滑动条的长度
  min: 范围边界小值
  max: 范围边界大值
  val: 初始值
          
</pre>
  <br />
  <p># 绑定了鼠标事件和触摸事件,按住滑块按钮拖动改变滑块的值.</p>
  <p>事件绑定在容器元素上,没用绑定在滑块按钮上,为了实现当鼠标不在按钮上时,也能触发滑动事件.</p>
  <br />
  <pre class="bg-gray-lt">

  // 绑定滑动事件,这个例子中,获取滑块的值,在canvas里绘制小方块的个数
  let crag1 = document.getElementById('range1');

  // val: 当前滑块的值
  crag1.<strong>onChange</strong> = (val)=>{

  }

</pre>
  <br />
  <p># 设置滑块位置</p>
  <pre class="bg-gray-lt">

  // num: 要设置的值,在[min,max]之间的值
  crag1.<strong>Value</strong> = num;

</pre>
  <br />
  <m-range id="range1" width="600" min="0" max="100" val="0"></m-range>
  <br /><br />
  <canvas id="canvasrange1" style="background-color:#eee"></canvas>
</div>
<script>
  (() => {
    const $ = window.ns.domHelp;
    let cav = document.getElementById('canvasrange1');
    let ctx = cav.getContext('2d');
    cav.width = cav.height = 256;
    ctx.fillStyle = 'orange';
    let gridW = 16, gridH = 16, row = 16, col = 16, rowH = 16, colW = 16;

    //
    let gridsX = [], gridsY = [];

    let crag1 = document.getElementById('range1');
    crag1.onChange = (val) => {
      let count = val;
      gridsX.length = gridsY.length = 0;
      for (let i = 0; i < count; i++) {
        let gridIndex = nextInt(0, 256);
        let xy = getXY(gridIndex);
        if (hasXY(xy[0], xy[1])) continue;
        gridsX.push(xy[0]);
        gridsY.push(xy[1]);
      }
      //console.log(gridsX.length);
      ctx.clearRect(0, 0, cav.width, cav.height);
      for (var i = 0, len = gridsX.length; i < len; i++) {
        let x = gridsX[i], y = gridsY[i];
        drawGrid(ctx, x * gridW, y * gridH, colW, rowH);
      }
    }


    // fun
    function hasXY(x, y) {
      for (var i = 0, len = gridsX.length; i < len; i++) {
        if (x == gridsX[i] && y == gridsY[i])
          return true;
      }
      return false;
    }
    function getXY(gridIndex) {
      //console.log(gridIndex);
      // 在几行: 除以行高的商
      let x = parseInt(gridIndex / rowH);
      // 在几列: 除以列宽的余数
      let y = gridIndex % colW;
      return [x, y]
    }
    function drawGrid(ctx, x, y, w, h) {
      ctx.beginPath();
      ctx.fillRect(x, y, w, h);
    }
    function nextInt(intMin, intMax) {
      let rand = Math.random() * (intMax - intMin);
      return Math.floor(rand) + intMin;
    };
  })();
</script>